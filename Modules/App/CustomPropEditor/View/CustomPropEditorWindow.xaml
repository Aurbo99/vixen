<Window
	x:Class="VixenModules.App.CustomPropEditor.View.CustomPropEditorWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:views="clr-namespace:VixenModules.App.CustomPropEditor.View"
        xmlns:controls="clr-namespace:VixenModules.App.CustomPropEditor.Controls"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
	xmlns:commonConverters="clr-namespace:Common.WPFCommon.Converters;assembly=WPFCommon"
	xmlns:wpfPropertyGrid="http://schemas.denisvuyka.wordpress.com/wpfpropertygrid"
        xmlns:catel="http://schemas.catelproject.com"
       


        Title="Custom Prop Editor" Height="700" Width="900">
	<!--<views:PropEditorView></views:PropEditorView>-->


	<Window.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="..\Themes\GroupBox.xaml"/>

				<!--<ResourceDictionary Source="..\Themes\Generic.xaml"/>-->
			</ResourceDictionary.MergedDictionaries>
			<ContextMenu x:Key="DesignerCanvasContextMenu">
				<MenuItem Header="Paste" Command="{x:Static ApplicationCommands.Paste}">
					<!--<MenuItem.Icon>
                    <Image Source="Resources/Images/Paste.png" Width="20"/>
                </MenuItem.Icon>-->
				</MenuItem>
				<MenuItem Header="Select All"/>
			</ContextMenu>
			<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
			<commonConverters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
		</ResourceDictionary>
	</Window.Resources>

	<!--<i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <ei:CallMethodAction TargetObject="{Binding}" MethodName="LoadProp"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>-->
	<DockPanel>
		<Menu DockPanel.Dock="Top">
			<MenuItem Header="File" Name="FileMenu">
				<MenuItem Header="New" Command="{Binding NewPropCommand}"></MenuItem>
				<MenuItem Header="Open" Command="{Binding OpenPropCommand}"></MenuItem>
				<MenuItem Header="Save" Command="{Binding SaveModelCommand}"></MenuItem>
				<MenuItem Header="Save As"></MenuItem>
				<MenuItem Header="Import xModel" Command="{Binding ImportCommand}" CommandParameter="xModel"></MenuItem>
			</MenuItem>
			<MenuItem Header="Edit" Name="EditMenu">
				<MenuItem Header="Cut"></MenuItem>
				<MenuItem Header="Copy"></MenuItem>
				<MenuItem Header="Paste"></MenuItem>
			</MenuItem>
			<MenuItem Header="View">
				<MenuItem Header="Opacity">
					<controls:SliderMenuItem x:Name="OpacitySliderMenu" ItemValue="{Binding DrawingPanelViewModel.Opacity, Mode=TwoWay}">
						<MenuItem Header="10%" controls:SliderMenuItem.ItemValue=".1"></MenuItem>
						<MenuItem Header="20%" controls:SliderMenuItem.ItemValue=".2"></MenuItem>
						<MenuItem Header="30%" controls:SliderMenuItem.ItemValue=".3"></MenuItem>
						<MenuItem Header="40%" controls:SliderMenuItem.ItemValue=".4"></MenuItem>
						<MenuItem Header="50%" controls:SliderMenuItem.ItemValue=".5"></MenuItem>
						<MenuItem Header="60%" controls:SliderMenuItem.ItemValue=".6"></MenuItem>
						<MenuItem Header="70%" controls:SliderMenuItem.ItemValue=".7"></MenuItem>
						<MenuItem Header="80%" controls:SliderMenuItem.ItemValue=".8"></MenuItem>
						<MenuItem Header="90%" controls:SliderMenuItem.ItemValue=".9"></MenuItem>
						<MenuItem Header="100%" controls:SliderMenuItem.ItemValue="1"></MenuItem>
					</controls:SliderMenuItem>
				</MenuItem>
			</MenuItem>
			<MenuItem Header="Help" />
		</Menu>
		<StatusBar DockPanel.Dock="Bottom">
			<StatusBarItem>
				<StackPanel Orientation="Horizontal">
					<StackPanel.Style>
						<Style TargetType="StackPanel">
							<Style.Triggers>
								<DataTrigger Binding="{Binding Path=IsMouseOver, ElementName=PropDesigner}" Value="False">
									<Setter Property="Visibility" Value="Hidden"/>
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</StackPanel.Style>
					<TextBlock Text="{Binding Path=Coordinates.X, StringFormat='{}{0:0}', ElementName=PropDesigner}"/>
					<TextBlock Text=", "></TextBlock>
					<TextBlock Text="{Binding Path=Coordinates.Y, StringFormat='{}{0:0}', ElementName=PropDesigner}"/>
				</StackPanel>
			</StatusBarItem>
		</StatusBar>
		<Border BorderThickness="0 0 0 1" >


			<Grid Background="{StaticResource BackColorBrush}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="1*"/>
					<ColumnDefinition Width="2*"/>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="*"/>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>

				<views:ElementTree Grid.Column="0" Grid.Row="0"/>
				<wpfPropertyGrid:PropertyGrid Grid.Row="1" Grid.Column="0"
                                              ItemsSource="{Binding ElementTreeViewModel.SelectedItems}"
                                              ShowAttachedProperties="False"
                                              ShowReadOnlyProperties="True"
                                              PropertyFilterVisibility="Hidden">
					<wpfPropertyGrid:PropertyGrid.Resources>
						<ResourceDictionary>
							<ResourceDictionary.MergedDictionaries>
								<wpfPropertyGrid:KaxamlTheme/>
							</ResourceDictionary.MergedDictionaries>
						</ResourceDictionary>
					</wpfPropertyGrid:PropertyGrid.Resources>
				</wpfPropertyGrid:PropertyGrid>

				<DockPanel Grid.Column="1" Grid.Row="0" Grid.RowSpan="2">
					<ToolBarTray DockPanel.Dock="Top" Background="{StaticResource BackColorBrush}">
						<ToolBar Background="{StaticResource BackColorBrush}">
							<RadioButton IsChecked="{Binding DrawingPanelViewModel.IsDrawing}" ToolTip="Draw mode" GroupName="SelectDraw"
							             Style="{StaticResource {x:Type ToggleButton}}" Width="30">
								<Image Source="/CustomPropEditor;component/Images/buttonDrawPixel.png" Height="20" Width="20"/>
							</RadioButton>
							<RadioButton IsChecked="{Binding DrawingPanelViewModel.IsDrawing, Converter={StaticResource InverseBooleanConverter}}" 
							             ToolTip="Selection mode" GroupName="SelectDraw"
							             Style="{StaticResource {x:Type ToggleButton}}" Width="30">
								<Image Source="/CustomPropEditor;component/Images/buttonSelect.png" Height="20" Width="20"/>
							</RadioButton>
							<Separator />
							<Button Command="Copy" ToolTip="Cut" Style="{StaticResource {x:Type Button}}">
								<Image Source="/CustomPropEditor;component/Images/cut.png" Height="20"/>
							</Button>
							<Button Command="Paste" ToolTip="Copy" Style="{StaticResource {x:Type Button}}">
								<Image Source="/CustomPropEditor;component/Images/copy.png" Height="20"/>
							</Button>
							<Button Command="Paste" ToolTip="Paste" Style="{StaticResource {x:Type Button}}">
								<Image Source="/CustomPropEditor;component/Images/paste.png" Height="20"/>
							</Button>
							<Separator />
							<Button Command="{Binding LoadImageCommand}" ToolTip="Assign Background" Style="{StaticResource {x:Type Button}}">
								<Image Source="/CustomPropEditor;component/Images/BackgroundImage.png" Height="20"/>
							</Button>
							<Separator />
							<Button Command="{Binding DrawingPanelViewModel.AlignLeftCommand}" ToolTip="Align Left" Style="{StaticResource {x:Type Button}}">
								<Image Source="/CustomPropEditor;component/Images/buttonAlignLeft.png" Height="20"/>
							</Button>
							<Button Command="{Binding DrawingPanelViewModel.AlignRightCommand}" ToolTip="Align Right" Style="{StaticResource {x:Type Button}}">
								<Image Source="/CustomPropEditor;component/Images/buttonAlignRight.png" Height="20"/>
							</Button>
							<Button Command="{Binding DrawingPanelViewModel.AlignTopsCommand}" ToolTip="Align Top" Style="{StaticResource {x:Type Button}}">
								<Image Source="/CustomPropEditor;component/Images/buttonAlignTop.png" Height="20"/>
							</Button>
							<Button Command="{Binding DrawingPanelViewModel.AlignBottomsCommand}" ToolTip="Align Bottom" Style="{StaticResource {x:Type Button}}">
								<Image Source="/CustomPropEditor;component/Images/buttonAlignBottom.png" Height="20"/>
							</Button>
							<Button Command="{Binding DrawingPanelViewModel.DistributeHorizontallyCommand}" ToolTip="Distribute Horizontal" Style="{StaticResource {x:Type Button}}">
								<Image Source="/CustomPropEditor;component/Images/buttonDistributeHorizontal.png" Height="20"/>
							</Button>
							<Button Command="{Binding DrawingPanelViewModel.DistributeVerticallyCommand}" ToolTip="Distribute Vertical" Style="{StaticResource {x:Type Button}}">
								<Image Source="/CustomPropEditor;component/Images/buttonDistributeVertical.png" Height="20"/>
							</Button>
						</ToolBar>
					</ToolBarTray>
					<ScrollViewer  HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Background="Black">
						<controls:PropDesigner x:Name="PropDesigner"
                            LightNodeViewModelsSource="{Binding DrawingPanelViewModel.LightNodes}"
                            TransformCommand="{Binding DrawingPanelViewModel.TransformCommand}"
                            IsDrawing="{Binding DrawingPanelViewModel.IsDrawing}"
                            AddLightCommand="{Binding AddLightCommand}"
                            SelectedModels="{Binding DrawingPanelViewModel.SelectedItems}">
							<i:Interaction.Behaviors>
								<catel:KeyPressToCommand Command="{Binding DrawingPanelViewModel.DeleteSelectedLightsCommand}" Key="Delete" />
							</i:Interaction.Behaviors>
							<ItemsControl.ItemTemplate>
								<DataTemplate>
									<ContentControl>
										<Path StrokeThickness="1" Name="GeometryPath">
											<Path.Data >
												<EllipseGeometry Center="{Binding Center}" RadiusX="{Binding Size}" RadiusY="{Binding Size}"></EllipseGeometry>
											</Path.Data>
											<Path.Style>
												<Style TargetType="Path">
													<Setter Property="Fill" Value="White"/>
													<Style.Triggers>
														<DataTrigger Binding="{Binding IsSelected}" Value="True">
															<Setter Property="Fill" Value="HotPink"></Setter>
														</DataTrigger>
													</Style.Triggers>
												</Style>
											</Path.Style>
										</Path>
									</ContentControl>
								</DataTemplate>
							</ItemsControl.ItemTemplate>
							<ItemsControl.ItemsPanel>
								<ItemsPanelTemplate>
									<Canvas x:Name="DrawingCanvas" 
                                            Height="{Binding DrawingPanelViewModel.Height, Mode=OneWay}" 
                                            Width="{Binding DrawingPanelViewModel.Width, Mode=OneWay}" 
                                            Margin="10"
                                            Focusable="True">
										<Canvas.Background>
											<ImageBrush ImageSource="{Binding DrawingPanelViewModel.Image}" Opacity="{Binding DrawingPanelViewModel.Opacity}"></ImageBrush>
										</Canvas.Background>
										
									</Canvas>
								</ItemsPanelTemplate>
							</ItemsControl.ItemsPanel>
						</controls:PropDesigner>

					</ScrollViewer>

				</DockPanel>
				<GridSplitter Grid.Row="0" Grid.Column="0" Grid.RowSpan="3" Width="5" HorizontalAlignment="Right" VerticalAlignment="Stretch"/>
			</Grid>
		</Border>
	</DockPanel>
</Window>



