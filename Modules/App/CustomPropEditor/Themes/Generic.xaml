<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:VixenModules.App.CustomPropEditor.Controls"
    xmlns:vm="clr-namespace:VixenModules.App.CustomPropEditor.ViewModel"
    xmlns:model="clr-namespace:VixenModules.App.CustomPropEditor.Model"
    xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.WPF.DragDrop"
    xmlns:a="clr-namespace:VixenModules.App.CustomPropEditor.Adorners">


    



    <!--<DataTemplate x:Key="DefaultGeometryTemplate" DataType="{x:Type Geometry}">
        <Path Fill="Red" Stroke="Green" StrokeThickness="1" Data="{Binding}" />
    </DataTemplate>-->

    <!--<DataTemplate x:Key="LightNodeTemplate" DataType="{x:Type model:LightNode}" >
        <Path Fill="White" StrokeThickness="1">
            <Path.Data>
                <EllipseGeometry Center="{Binding Center}" RadiusX="{Binding Size}" RadiusY="{Binding Size}"></EllipseGeometry>
            </Path.Data>
        </Path>
    </DataTemplate>-->

    <!--<DataTemplate x:Key="ElementCandidateTemplate" DataType="{x:Type model:ElementCandidate}">
        <Grid>
            <ItemsControl ItemsSource="{Binding Lights}" ItemTemplate="{DynamicResource LightNodeTemplate}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

            </ItemsControl>
            <ContentControl>
                <ItemsControl ItemsSource="{Binding Children}" ItemTemplate="{DynamicResource ElementCandidateTemplate}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </ContentControl>

        </Grid>
    </DataTemplate>-->

    <!--<Style TargetType="{x:Type controls:PropEditorControl}">
        <Setter Property="GeometryTemplate" Value="{StaticResource LightNodeTemplate}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PropEditorControl}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter >
                            
                        </ItemsPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Canvas />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate" Value="{DynamicResource LightNodeTemplate}">

        </Setter>
        
    </Style>-->

    <a:NegativeConverter x:Key="NegativeConverter" />
    <Style TargetType="{x:Type a:ResizingAdorner}" >
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type a:ResizingAdorner}" >
                    <Canvas Background="{TemplateBinding Background}" IsEnabled="{TemplateBinding IsEnabled}">

                        <Thumb Name="PART_THUMB_MOVE" Width="{Binding Width}" Height="{Binding Height}" >
                            <Thumb.Template>
                                <ControlTemplate TargetType="{x:Type Thumb}" >
                                    <Border Background="Transparent" >
                                        <ContentPresenter />
                                    </Border>
                                </ControlTemplate>
                            </Thumb.Template>
                        </Thumb>
                        <Thumb Name="PART_THUMB_NW" Canvas.Left="{TemplateBinding HandleSize, Converter={StaticResource NegativeConverter}}" Canvas.Top="{TemplateBinding HandleSize, Converter={StaticResource NegativeConverter}}" Width="{TemplateBinding HandleSize}" Height="{TemplateBinding HandleSize}" Cursor="SizeNWSE"  />
                        <Thumb Name="PART_THUMB_NE" Canvas.Left="{Binding Width}" Canvas.Top="{TemplateBinding HandleSize, Converter={StaticResource NegativeConverter}}" Width="{TemplateBinding HandleSize}" Height="{TemplateBinding HandleSize}" Cursor="SizeNESW"  />
                        <Thumb Name="PART_THUMB_SW" Canvas.Left="{TemplateBinding HandleSize, Converter={StaticResource NegativeConverter}}" Canvas.Top="{Binding Height}" Width="{TemplateBinding HandleSize}" Height="{TemplateBinding HandleSize}" Cursor="SizeNESW" />
                        <Thumb Name="PART_THUMB_SE" Canvas.Left="{Binding Width}" Canvas.Top="{Binding Height}" Width="{TemplateBinding HandleSize}" Height="{TemplateBinding HandleSize}" Cursor="SizeNWSE"  />

                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--<ControlTemplate x:Key="ResizeControlAdornerTemplate" TargetType="{x:Type a:ResizingAdorner}">
        <Canvas Background="Transparent">
            <Thumb Name="PART_THUMB_NW" Canvas.Left="{TemplateBinding HandleSize, Converter={StaticResource NegativeConverter}}" Canvas.Top="{TemplateBinding HandleSize, Converter={StaticResource NegativeConverter}}" Width="{TemplateBinding HandleSize}" Height="{TemplateBinding HandleSize}" Cursor="SizeNWSE"  />
            <Thumb Name="PART_THUMB_NE" Canvas.Left="{Binding Width}" Canvas.Top="{TemplateBinding HandleSize, Converter={StaticResource NegativeConverter}}" Width="{TemplateBinding HandleSize}" Height="{TemplateBinding HandleSize}" Cursor="SizeNESW"  />
            <Thumb Name="PART_THUMB_SW" Canvas.Left="{TemplateBinding HandleSize, Converter={StaticResource NegativeConverter}}" Canvas.Top="{Binding Height}" Width="{TemplateBinding HandleSize}" Height="{TemplateBinding HandleSize}" Cursor="SizeNESW" />
            <Thumb Name="PART_THUMB_SE" Canvas.Left="{Binding Width}" Canvas.Top="{Binding Height}" Width="{TemplateBinding HandleSize}" Height="{TemplateBinding HandleSize}" Cursor="SizeNWSE"  />
        </Canvas>
    </ControlTemplate>

    <Style x:Key="{x:Type a:ResizeControlAdorner}" TargetType="{x:Type controls:ResizeRotateControl}">
        <Setter Property="Template" Value="{StaticResource ResizeControlAdornerTemplate}"/>
    </Style>-->

    <!--<Style TargetType="{x:Type controls:PropEditorControl}">
        <Setter Property="GeometryTemplate" Value="{StaticResource LightNodeTemplate}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PropEditorControl}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        
                        <ListBox ItemsSource="{TemplateBinding LightNodesSource}" Background="LightGray">
                            <ListBox.Resources>
                                <ControlTemplate x:Key="ItemTemplate" TargetType="{x:Type ListBoxItem}" >
                                    <ContentPresenter />
                                </ControlTemplate>
                                <DataTemplate DataType="{x:Type vm:LightViewModel}" >
                                    <StackPanel a:SmartAdorner.Visible="{Binding IsSelected}">
                                        <Path Fill="White" StrokeThickness="1">
                                            <Path.Data>
                                                <EllipseGeometry Center="{Binding Center}" RadiusX="{Binding Size}" RadiusY="{Binding Size}"></EllipseGeometry>
                                            </Path.Data>
                                        </Path>
                                        <a:SmartAdorner.Template>
                                            <DataTemplate DataType="{x:Type vm:LightViewModel}">
                                                <Canvas>
                                                    <Path Fill="Yellow" StrokeThickness="1" Name="GeometryPath">
                                                        <Path.Data >
                                                            <EllipseGeometry Center="{Binding Center}" RadiusX="{Binding Size}" RadiusY="{Binding Size}"></EllipseGeometry>
                                                        </Path.Data>
                                                    </Path>
                                                    <a:DragThumb Canvas.Left="{Binding Data.Bounds.Left, ElementName=GeometryPath, Mode=OneWay}" 
                                                                 Canvas.Top="{Binding Data.Bounds.Top, ElementName=GeometryPath, Mode=OneWay}" 
                                                                 Width="{Binding Data.Bounds.Width, ElementName=GeometryPath, Mode=OneWay}" 
                                                                 Height="{Binding Data.Bounds.Height, ElementName=GeometryPath, Mode=OneWay}" 
                                                                 X="{Binding X}" 
                                                                 Y="{Binding Y}" 
                                                                 Opacity="0" Cursor="SizeAll">

                                                    </a:DragThumb>
                                                    
                                                </Canvas>
                                            </DataTemplate>
                                        </a:SmartAdorner.Template>
                                    </StackPanel>
                                    
                                </DataTemplate>
                            </ListBox.Resources>
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="{x:Type ListBoxItem}" >
                                    <Setter Property="Template" Value="{StaticResource ItemTemplate}" />
                                    --><!--<Setter Property="Canvas.Left" Value="{Binding Left}" />
                                    <Setter Property="Canvas.Top" Value="{Binding Top}" />--><!--
                                    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <Canvas>
                                    </Canvas>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                        </ListBox>
                        
                            --><!--<ItemsControl ItemsSource="{TemplateBinding LightNodesSource}" 
                                          ItemTemplate="{DynamicResource LightNodeTemplate}"
                                          dd:DragDrop.IsDragSource="True"
                                          dd:DragDrop.IsDropTarget="True"
                                          dd:DragDrop.DropHandler="{Binding}"
                                          dd:DragDrop.DragHandler="{Binding}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <Canvas/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>--><!--
                            
                       
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
</ResourceDictionary>
