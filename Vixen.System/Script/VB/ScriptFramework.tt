<#@ template language="C#" debug="true" #>
<#@ assembly name="Vixen.dll" #>
<#@ import namespace="Vixen.Sys" #>
<#@ import namespace="Vixen.Module.Effect" #>
<#@ import namespace="System.Linq" #>
<#@ assembly Name="System.Core" #>
Option Strict Off

imports System
imports System.Collections.Generic
imports System.Linq
imports System.Text
imports System.Threading
imports System.Dynamic
imports Vixen.Sys
imports Vixen.Common
imports Vixen.Module.Sequence
imports Vixen.Script
imports CommandStandard

Namespace <#=Namespace#> 
	Partial Public Class <#=ClassName #>
		Inherits UserScriptHost
		'Private _fixtures() As UserScriptFixture
		Private _fixtures
		' Command name : command spec type id
		Private _commands As Dictionary(Of String, Guid)

		Public Sub New
			' Need to copy the command dictionary made in code, but in such a way that
			' it can be built when this is executing..
			_commands = New Dictionary(Of String, Guid)
<#
	//ICommandSpecModuleInstance commandSpec;
	foreach(string commandName in _commands.Keys) {
		//commandSpec = _commands[commandName];
#>
			_commands.Add("<#=commandName#>", New Guid("<#=_commands[commandName].TypeId#>"))
<# } #>		
		End Sub

		Public Overrides Property Sequence() As ScriptSequenceBase 
			Get
				Return MyBase.Sequence
			End Get
			Set
				MyBase.Sequence = Value
				_fixtures = _
					value.Fixtures.Select(Function(x) New UserScriptFixture(x)).ToArray()
			End Set
		End Property

		' Arg 0: IEnumerable<UserScriptChannel>
		' Arg 1: int startTime
		' Arg 2: int timeSpan
		' Arg 3: Start of command-specific parameters
		Protected Sub _InvokeCommand(commandName As String, ParamArray args() as object)
			Dim effectId as Guid
			Dim channels as IEnumerable(Of UserScriptChannel)
			Dim startTime as Integer
			Dim timeSpan as Integer
			If _commands.TryGetValue(commandName, effectId) Then
				If args.Length < 3 Then
					Throw New ArgumentException("Invalid parameter count to invoke a command.")
				End If
				' Argument 1: IEnumerable<UserScriptChannel>
				channels = args(0)
				If channels is Nothing Then
					Throw New ArgumentException("First parameter must be a channel collection.")
				End If
				' Argument 2: int (start time)
				startTime = args(1)
				' Argument 3: int (time span)
				timeSpan = args(2)
				
				Sequence.InsertData(channels.Select(Function(x) x.Channel).ToArray() , startTime, timeSpan, New Command(effectId, args.Skip(3).ToArray()))
			End If
		End Sub

<#
	foreach(string commandName in _commands.Keys) {
		IEffectModuleInstance effect = _commands[commandName];
		string commandParameters =
			string.Join(", ",
			(from parameter in effect.Parameters
			select parameter.Name + " As " + parameter.Type).ToArray());
		string parameterNames =
			string.Join(", ",
			(from parameter in effect.Parameters
			select parameter.Name).ToArray());
#>
		' Original name: <#=effect.CommandName#>
		Public Sub <#=commandName#>(channels As IEnumerable(Of UserScriptChannel), startTime As Integer, timeSpan As Integer, <#=commandParameters#>)
			_InvokeCommand("<#=commandName#>", channels, startTime, timeSpan, <#=parameterNames#>)
		End Sub

		Public Sub <#=commandName#>(channels As IEnumerable(Of UserScriptChannel), timeSpan As Integer, <#=commandParameters#>)
			_InvokeCommand("<#=commandName#>", channels, 0, timeSpan, <#=parameterNames#>)
		End Sub

<# } #>
<# Fixture[] fixtures = _sequence.Fixtures.ToArray();
	for(int i=0; i < fixtures.Length; i++) { #>
		' Original name: <#=fixtures[i].Name#>
		Public ReadOnly Property <#= ScriptHostGenerator.Mangle(fixtures[i].Name)#>() As Object
			Get
				Return _fixtures(<#= i #>)
			End Get
		End Property
<# } #>
	End Class
End Namespace
