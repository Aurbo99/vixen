DISCLAIMER:
This file is not meant to be a comprehensive guide or tutorial.  They are
some notes created while creating this project that may help you do the
same.

--== Sample Property Module ==--

Property modules provide additional information about a channel node (group).
They are passive objects that effects can make use when rendering data for
the channels in the group.
Since effects have to have knowledge of the specific types implemented by a
property module (unclean, we know), they can also provide some helper methods
for effects.
For example, an RGB property on a group that contained three channels could
identify which is the red, green, and blue channels.  Additionally, it could
provide methods (static or instance) to calculate RGB values or transitions.

This property module will not have any data because it will be used to indicate
a property of the group as a whole.  This is a viable use of a property module.

===============================================================================

I will assume that you have used C# and Visual Studio before, but I will
try not to assume much more than that.

Step 1: Create a Class Library project.
Step 2: Reference Vixen.dll in the project.

Neither of those steps should require explanation.

A module may or may not have persisted data via a data object.
This sample project will because that's how effects' parameters
are persisted.

Step 3: Create some classes.

Use whatever names you like for these classes I'm about to describe.  But
if you're going to have more than one module in the assembly, you may want
to keep the names centered around the module (for example, instead of
calling a class "Descriptor", call it "RenardDescriptor").

Class 1: The descriptor class.
Class 2: The module class.

Make each of these classes public.

Each module type has base classes you can use to implement the mundane
members.  The descriptor is the easiest of the three, so I will start there.

Step 4: Create the descriptor.

Import namespaces: Vixen.Module.Property
Derive from: PropertyModuleDescriptorBase

Have Visual Studio implement the base class for you and you will see (not in this
order):

Author:      You. Duh.
Description: Anything you like.
TypeName:    The name of your module that users will see.
Version:     Not currently used, but it may be in the future.
TypeId:      A unique, *unique*, UNIQUE GUID that you generate.
             Yes, make sure it's unique and you didn't copy it
             from someone/somewhere else.  This is the value that
             uniquely indentifies your module.  If this conflicts
             with another module, neither module will be loaded.
ModuleClass: The type that implements your module (class 2 in this sample).

The descriptor is done.

Step 5: Create the module class.

Import namespaces: Vixen.Module, Vixen.Module.Property
Derive from: PropertyModuleInstanceBase

Everything up until now has been to support this one class.  This is the class
that does everything.  It IS your module.

The members necessary to implement:

SetDefaultValues: This method will be used to set your property's values (if
                  any) to a default state.

Other members of note:

Owner:            The ChannelNode that the property is attached to.
CloneValues:      An editor may use this when a property is copied between nodes.
                  The sourceProperty parameter gives the source property that
                  the local property is to copy values from, making them appropriate
                  for the node the local property is attached to.
HasSetup:         If your property is going to need the user to set it up, override
                  this to return true;
Setup:            And also override this to react to the user wanting to set it up.

If you take a look at the SampleEffect project, you'll see that there is a reference
to this property in its rendering.  The effect works both with and without the
property being present.

Do the build voodoo that you do and drop the resulting binary into the 
Modules/Property directory.